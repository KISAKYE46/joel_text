/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package joeleditor;

import java.awt.Color;
import java.awt.Point;
import java.awt.Rectangle;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.border.Border;

/**
 *
 * @author kisakye
 */
public class Index extends javax.swing.JFrame {

    /**
     * Creates new form Index
     */
    HashMap<Integer,File> recntDirectories = new HashMap<>();
    File currentFile = null;
    JPopupMenu jpm;
    
    JFrame currentFrame = this;
    public Index() {
        super("Joel-Text-");
        initComponents();
        textArea.setMargin(new java.awt.Insets(1, 1, 1, 1));
        
        Border b = textArea.getBorder();
        
       
        
         jpm = new JPopupMenu();
        jpm.setLocation(456,789);
        Rectangle rect = new Rectangle();
        
        
       
        rect.width  = 400;
        rect.height =100;
        jpm.setPopupSize(200, 100);
        jpm.setBackground(Color.BLACK);
        
        jpm.setBounds(rect);
        
        JMenuItem it = new JMenuItem();
        JMenuItem it2 = new JMenuItem();
        JMenuItem it3 = new JMenuItem();
        it.setText("Copy");
        jpm.add(it);
        it3.setText("Paste");
        it2.setText("Cut");
        
        it.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMenuItemActionPerformed(evt);
            }
        });
        
        it2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutMenuItemActionPerformed(evt);
            }
        });
        
        it3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteMenuItemActionPerformed(evt);
            }
        });
        jpm.add(it2);
        jpm.add(it3);
        
        textArea.setWrapStyleWord(true);
        
        jpm.setBounds(rect);
        jpm.setLightWeightPopupEnabled(true);
        textArea.setLineWrap(true);
        
        currentFrame = this;
        menuBar.setMargin(null);
        this.setLocationRelativeTo(null);
        textArea.getDocument().getStartPosition();
    }
    
    
    public Index(File f) {
        super("Joel-Text-");
        initComponents();
        currentFrame = this;
        menuBar.setMargin(null);
        this.setLocationRelativeTo(null);
        this.currentFile=f;
    }
    
    //shows current directory
    public void showCurrentDir(){
        if(this.currentFile!=null){
        String path = this.currentFile.getPath();
        this.setTitle("("+path+")"+"-Joel-Text-");
        }else{
        this.setTitle("-Joel-text-");}
        String fname = currentFile.getName();
        
        String[] fArr = fname.split("[.]{1,}");
        
        if(fArr.length>0){
            String ext = fArr[fArr.length-1];
        if(ext.equalsIgnoreCase("html")){
            this.fileTypeText.setText("HTML");
            this.textArea.setForeground(Color.white);
        }else  if(ext.equalsIgnoreCase("php")){
            this.fileTypeText.setText("PHP");
            this.textArea.setForeground(Color.green);
        }else  if(ext.equalsIgnoreCase("js")){
            this.fileTypeText.setText("JavaScript");
            this.textArea.setForeground(Color.ORANGE);
        }else  if(ext.equalsIgnoreCase("java")){
            this.fileTypeText.setText("Java");
            this.textArea.setForeground(Color.RED);
        }else  if(ext.equalsIgnoreCase("py")){
            this.fileTypeText.setText("Python");
            this.textArea.setForeground(Color.blue);
        }else{
            this.fileTypeText.setText("PlainText");
            this.textArea.setForeground(Color.pink);
        }
          
      textArea.setSelectedTextColor(Color.DARK_GRAY);
      
      
        
        }
        
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jScrollPane3 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        fileTypeText = new javax.swing.JLabel();
        lineNumber = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 51, 51));
        setFocusCycleRoot(false);
        getContentPane().setLayout(new java.awt.CardLayout());

        textArea.setBackground(new java.awt.Color(51, 51, 0));
        textArea.setColumns(20);
        textArea.setFont(new java.awt.Font("DejaVu Serif Condensed", 2, 18)); // NOI18N
        textArea.setForeground(new java.awt.Color(102, 255, 255));
        textArea.setLineWrap(true);
        textArea.setRows(5);
        textArea.setWrapStyleWord(true);
        textArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        textArea.setDragEnabled(true);
        textArea.setInheritsPopupMenu(true);
        textArea.setMargin(new java.awt.Insets(3, 3, 3, 3));
        textArea.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                textAreaFocusLost(evt);
            }
        });
        textArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textAreaMouseClicked(evt);
            }
        });
        textArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textAreaKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(textArea);

        getContentPane().add(jScrollPane3, "card2");

        jLayeredPane1.setBackground(new java.awt.Color(51, 51, 51));
        jLayeredPane1.setOpaque(true);

        fileTypeText.setFont(new java.awt.Font("DejaVu Serif", 0, 10)); // NOI18N
        fileTypeText.setForeground(new java.awt.Color(255, 102, 102));
        fileTypeText.setText("PlainText");

        lineNumber.setFont(new java.awt.Font("DejaVu Serif", 0, 10)); // NOI18N
        lineNumber.setForeground(new java.awt.Color(255, 255, 255));
        lineNumber.setText("line1");

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lineNumber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 593, Short.MAX_VALUE)
                .addComponent(fileTypeText)
                .addContainerGap())
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap(447, Short.MAX_VALUE)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lineNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileTypeText)))
        );
        jLayeredPane1.setLayer(fileTypeText, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(lineNumber, javax.swing.JLayeredPane.DEFAULT_LAYER);

        getContentPane().add(jLayeredPane1, "card3");

        menuBar.setBackground(new java.awt.Color(51, 0, 204));
        menuBar.setBorder(null);
        menuBar.setForeground(new java.awt.Color(255, 255, 255));
        menuBar.setOpaque(false);

        fileMenu.setForeground(new java.awt.Color(0, 0, 0));
        fileMenu.setMnemonic('f');
        fileMenu.setText("File");
        fileMenu.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        openMenuItem.addMenuKeyListener(new javax.swing.event.MenuKeyListener() {
            public void menuKeyPressed(javax.swing.event.MenuKeyEvent evt) {
                openMenuItemMenuKeyPressed(evt);
            }
            public void menuKeyReleased(javax.swing.event.MenuKeyEvent evt) {
            }
            public void menuKeyTyped(javax.swing.event.MenuKeyEvent evt) {
            }
        });
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setForeground(new java.awt.Color(0, 0, 0));
        editMenu.setMnemonic('e');
        editMenu.setText("Edit");
        editMenu.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        cutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        copyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        pasteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        deleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setForeground(new java.awt.Color(0, 0, 0));
        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");
        helpMenu.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openMenuItemMenuKeyPressed(javax.swing.event.MenuKeyEvent evt) {//GEN-FIRST:event_openMenuItemMenuKeyPressed
       //
    }//GEN-LAST:event_openMenuItemMenuKeyPressed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
//       System.out.println(evt.getActionCommand());
//       DirectoryChooser dc = new DirectoryChooser();
//       dc.setVisible(true);
        
        FileManager fm = new FileManager();
        try {
            File f = fm.openFile();
            
            //currentFrame.setCursor(Cursor.CURSOR_WAIT);
            if(f!= null){
            FileReader fr = new FileReader(f);
            this.currentFile = f;
            String data ="";
            int intData =fr.read();
            while(intData!=-1){
                data = data+(char)intData;
                intData = fr.read();
            }
            fr.close();
            textArea.setText(data);
             this.showCurrentDir();
            }
            
        } catch (IOException ex) {
            Logger.getLogger(Index.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void cutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutMenuItemActionPerformed
        textArea.cut();
        jpm.setVisible(false);
    }//GEN-LAST:event_cutMenuItemActionPerformed

    private void copyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyMenuItemActionPerformed
         textArea.copy();
         jpm.setVisible(false);
    }//GEN-LAST:event_copyMenuItemActionPerformed

    private void pasteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteMenuItemActionPerformed
         textArea.paste();
         jpm.setVisible(false);
    }//GEN-LAST:event_pasteMenuItemActionPerformed

    private void deleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuItemActionPerformed
         textArea.replaceSelection("");
         jpm.setVisible(false);
    }//GEN-LAST:event_deleteMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        FileManager fm = new FileManager();
        String text = textArea.getText();
        try {
            this.currentFile = fm.saveAs(text);
        } catch (IOException ex) {
            Logger.getLogger(Index.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.showCurrentDir();
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
       String data = textArea.getText();
       FileManager fm = new FileManager();
        try {
            this.currentFile = fm.save(currentFile, data);
        } catch (IOException ex) {
            Logger.getLogger(Index.class.getName()).log(Level.SEVERE, null, ex);
        }
         this.showCurrentDir();
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void textAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textAreaMouseClicked
       int btn = evt.getButton();
       Point p = evt.getLocationOnScreen();
       jpm.setLocation(p);
       
       if(btn==3){
       
           jpm.setVisible(true);
       
       }else{
           jpm.setVisible(false);
       
       }
    }//GEN-LAST:event_textAreaMouseClicked

    private void textAreaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textAreaFocusLost
        jpm.setVisible(false);
    }//GEN-LAST:event_textAreaFocusLost

    private void textAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAreaKeyPressed
        System.out.println(evt.getKeyChar());
    }//GEN-LAST:event_textAreaKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Index().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel fileTypeText;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lineNumber;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables

}
